// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApplication4;

namespace WebApplication4.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20220511191751_Initialize3")]
    partial class Initialize3
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("WebApplication4.Models.AddRate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AddRate");
                });

            modelBuilder.Entity("WebApplication4.Models.AddRate_CatAddRate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddRateId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryAddId")
                        .HasColumnType("int");

                    b.Property<int?>("CategoryAddRateId")
                        .HasColumnType("int");

                    b.Property<int>("DiscountId")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int?>("TypeDiscountId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AddRateId");

                    b.HasIndex("CategoryAddRateId");

                    b.HasIndex("TypeDiscountId");

                    b.ToTable("AddRate_CatAddRate");
                });

            modelBuilder.Entity("WebApplication4.Models.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CatCompId")
                        .HasColumnType("int");

                    b.Property<int?>("CategoryComputerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateTimeBegin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateTimeEnd")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsBusy")
                        .HasColumnType("bit");

                    b.Property<int>("UsersId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryComputerId");

                    b.HasIndex("UsersId");

                    b.ToTable("Booking");
                });

            modelBuilder.Entity("WebApplication4.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("WebApplication4.Models.CategoryAddRate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CategoryAddRate");
                });

            modelBuilder.Entity("WebApplication4.Models.CategoryComputer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("ComputerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ComputerId");

                    b.ToTable("CategoryComputer");
                });

            modelBuilder.Entity("WebApplication4.Models.Computer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Headphones")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Keyborad")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Monitor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mouse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberComp")
                        .HasColumnType("int");

                    b.Property<string>("PhotoPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Processor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VideoCard")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Computer");
                });

            modelBuilder.Entity("WebApplication4.Models.FormCheck", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddRateId")
                        .HasColumnType("int");

                    b.Property<int>("BookingId")
                        .HasColumnType("int");

                    b.Property<int>("CatCompId")
                        .HasColumnType("int");

                    b.Property<int?>("CategoryComputerId")
                        .HasColumnType("int");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateRate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PayId")
                        .HasColumnType("int");

                    b.Property<int>("RateId")
                        .HasColumnType("int");

                    b.Property<int?>("TypaPayId")
                        .HasColumnType("int");

                    b.Property<int?>("UsersID")
                        .HasColumnType("int");

                    b.Property<bool>("isEarly")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AddRateId");

                    b.HasIndex("BookingId");

                    b.HasIndex("CategoryComputerId");

                    b.HasIndex("RateId");

                    b.HasIndex("TypaPayId");

                    b.HasIndex("UsersID");

                    b.ToTable("FormCheck");
                });

            modelBuilder.Entity("WebApplication4.Models.Game", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Game");
                });

            modelBuilder.Entity("WebApplication4.Models.GameComputer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ComputerId")
                        .HasColumnType("int");

                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ComputerId");

                    b.HasIndex("GameId");

                    b.ToTable("GameComputer");
                });

            modelBuilder.Entity("WebApplication4.Models.Rate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlayTime")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Rate");
                });

            modelBuilder.Entity("WebApplication4.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("WebApplication4.Models.TypeDiscount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("TypeDiscount");
                });

            modelBuilder.Entity("WebApplication4.Models.TypePay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TypePay");
                });

            modelBuilder.Entity("WebApplication4.Models.Users", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Login")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("WebApplication4.Models.AddRate_CatAddRate", b =>
                {
                    b.HasOne("WebApplication4.Models.AddRate", "AddRate")
                        .WithMany("AddRate_CatAddRates")
                        .HasForeignKey("AddRateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication4.Models.CategoryAddRate", "CategoryAddRate")
                        .WithMany("AddRate_CatAddRate")
                        .HasForeignKey("CategoryAddRateId");

                    b.HasOne("WebApplication4.Models.TypeDiscount", "TypeDiscount")
                        .WithMany("AddRate_CatAddRate")
                        .HasForeignKey("TypeDiscountId");

                    b.Navigation("AddRate");

                    b.Navigation("CategoryAddRate");

                    b.Navigation("TypeDiscount");
                });

            modelBuilder.Entity("WebApplication4.Models.Booking", b =>
                {
                    b.HasOne("WebApplication4.Models.CategoryComputer", "CategoryComputer")
                        .WithMany()
                        .HasForeignKey("CategoryComputerId");

                    b.HasOne("WebApplication4.Models.Users", "Users")
                        .WithMany("Bookings")
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CategoryComputer");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("WebApplication4.Models.CategoryComputer", b =>
                {
                    b.HasOne("WebApplication4.Models.Category", "Category")
                        .WithMany("CategoryComputers")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication4.Models.Computer", "Computer")
                        .WithMany("CategoryComputers")
                        .HasForeignKey("ComputerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Computer");
                });

            modelBuilder.Entity("WebApplication4.Models.FormCheck", b =>
                {
                    b.HasOne("WebApplication4.Models.AddRate", "AddRate")
                        .WithMany("FormChecks")
                        .HasForeignKey("AddRateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication4.Models.Booking", "Booking")
                        .WithMany("FormChecks")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication4.Models.CategoryComputer", "CategoryComputer")
                        .WithMany("FormChecks")
                        .HasForeignKey("CategoryComputerId");

                    b.HasOne("WebApplication4.Models.Rate", "Rate")
                        .WithMany("FormChecks")
                        .HasForeignKey("RateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication4.Models.TypePay", "TypaPay")
                        .WithMany("FormChecks")
                        .HasForeignKey("TypaPayId");

                    b.HasOne("WebApplication4.Models.Users", "Users")
                        .WithMany("FormChecks")
                        .HasForeignKey("UsersID");

                    b.Navigation("AddRate");

                    b.Navigation("Booking");

                    b.Navigation("CategoryComputer");

                    b.Navigation("Rate");

                    b.Navigation("TypaPay");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("WebApplication4.Models.GameComputer", b =>
                {
                    b.HasOne("WebApplication4.Models.Computer", "Computer")
                        .WithMany("GameComputers")
                        .HasForeignKey("ComputerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication4.Models.Game", "Game")
                        .WithMany("GameComputer")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Computer");

                    b.Navigation("Game");
                });

            modelBuilder.Entity("WebApplication4.Models.Users", b =>
                {
                    b.HasOne("WebApplication4.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("WebApplication4.Models.AddRate", b =>
                {
                    b.Navigation("AddRate_CatAddRates");

                    b.Navigation("FormChecks");
                });

            modelBuilder.Entity("WebApplication4.Models.Booking", b =>
                {
                    b.Navigation("FormChecks");
                });

            modelBuilder.Entity("WebApplication4.Models.Category", b =>
                {
                    b.Navigation("CategoryComputers");
                });

            modelBuilder.Entity("WebApplication4.Models.CategoryAddRate", b =>
                {
                    b.Navigation("AddRate_CatAddRate");
                });

            modelBuilder.Entity("WebApplication4.Models.CategoryComputer", b =>
                {
                    b.Navigation("FormChecks");
                });

            modelBuilder.Entity("WebApplication4.Models.Computer", b =>
                {
                    b.Navigation("CategoryComputers");

                    b.Navigation("GameComputers");
                });

            modelBuilder.Entity("WebApplication4.Models.Game", b =>
                {
                    b.Navigation("GameComputer");
                });

            modelBuilder.Entity("WebApplication4.Models.Rate", b =>
                {
                    b.Navigation("FormChecks");
                });

            modelBuilder.Entity("WebApplication4.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("WebApplication4.Models.TypeDiscount", b =>
                {
                    b.Navigation("AddRate_CatAddRate");
                });

            modelBuilder.Entity("WebApplication4.Models.TypePay", b =>
                {
                    b.Navigation("FormChecks");
                });

            modelBuilder.Entity("WebApplication4.Models.Users", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("FormChecks");
                });
#pragma warning restore 612, 618
        }
    }
}
